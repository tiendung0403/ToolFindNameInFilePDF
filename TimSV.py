import pdfplumber # th∆∞ vi·ªán l√†m vi·ªác v·ªõi PDF
import os # th∆∞ vi·ªán l√†m vi·ªác t·ª± ƒë·ªông v·ªõi h·ªá th·ªëng nh∆∞ li·ªát k√™ danh s√°ch trong th∆∞ m·ª•c , x√≥a th∆∞ m·ª•c

# ƒë∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c c·∫ßn l√†m vi·ªác

current_directory = os.getcwd()  # l·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i

folder_path = os.path.join(current_directory,"CTXH")

# ki·ªÉm tra th∆∞ m·ª•c t·ªìn t·∫°i hay kh√¥ng
if not os.path.exists(folder_path):
    print(f"‚ùå Th∆∞ m·ª•c '{folder_path}' kh√¥ng t·ªìn t·∫°i.")
    input()
    exit()

# h√†m tr√≠ch xu·∫•t th√¥ng tin t·ª´ m·ªôt file pdf
def extract_data_from_pdf(pdf_path):
    data = []  # danh s√°ch l∆∞u D·ªØ li·ªáu
    try: # d√πng with .. as ƒë·ªÉ m·ªü v√† ƒë√≥ng file t·ª± ƒë·ªông
        with pdfplumber.open(pdf_path) as pdf:
            # t·∫°o ƒë·ªëi t∆∞·ª£ng trang (page) trong file pdf
            for page in pdf.pages: 
                # t·∫°o danh d√°ch ch·ª©a c√°c b·∫£ng 2D trong m·ªôt trang n·∫øu
                tables = page.extract_tables()  # l·∫•y t·∫•t c·∫£ b·∫£ng tr√™n trang
                if not tables:
                    continue  # n·∫øu kh√¥ng c√≥ b·∫£ng n√†o th√¨ b·ªè qua trang n√†y

                for table in tables: # t·∫°o bi·∫øn b·∫£ng ch·ª©a b·∫£ng 2D trong danh s√°ch c√°c b·∫£ng 2D
                    if not table or len(table) < 2: 
                        continue  # N·∫øu b·∫£ng 2D ch·ªâ c√≥ m·ªôt h√†ng t·ª©c ti√™u ƒë·ªÅ(<2) => kh√¥ng c√≥ d·ªØ li·ªáu, b·ªè qua

                    header = table[0]  # l·∫•y d√≤ng ti√™u ƒë·ªÅ
                    # t√¨m v·ªã tr√≠ c·ªßa c√°c c·ªôt "MSSV", "H·ªç v√† T√™n" v√† "S·ªë ng√†y CTXH"
                    mssv_index, name_index, days_index = None, None, None

                    for i, col in enumerate(header):
                        if col:
                            col_lower = col.lower()
                            if "mssv" in col_lower or "m√£ s·ªë sv" in col_lower:
                                mssv_index = i # n·∫øu chu·ªói mssv c√≥ trong c·ªôt th√¨ g√°n v·ªã tr√≠
                            if "h·ªç v√† t√™n" in col_lower:
                                name_index = i
                            if "s·ªë ng√†y" in col_lower: # or "s·ªë ng√†y ctxh ƒë∆∞·ª£c t√≠nh" in col_lower or "s·ªë ng√†y c√¥ng t√°c x√£ h·ªôi" in col_lower:
                                days_index = i

                    # n·∫øu kh√¥ng t√¨m th·∫•y c√°c c·ªôt c·∫ßn thi·∫øt, b·ªè qua b·∫£ng n√†y
                    if name_index is None and days_index is None and mssv_index is None:
                        continue  

                    # Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ c√°c h√†ng b·∫Øt ƒë·∫ßu t·ª´ h√†ng s·ªë 1 tr·ªü ƒëi
                    for row in table[1:]:
                        mssv = "Kh√¥ng r√µ"  # gi√° tr·ªã m·∫∑c ƒë·ªãnh
                        name = "Kh√¥ng r√µ"
                        days = "0"  # N·∫øu kh√¥ng c√≥ s·ªë ng√†y, m·∫∑c ƒë·ªãnh l√† 0

                        if mssv_index is not None and row[mssv_index]: #and len(row) > mssv_index 
                            mssv = row[mssv_index].strip() # lo·∫°i b·ªè c√°c kho·∫£ng tr·∫Øng kh√¥ng c·∫ßn thi·∫øt
                        
                        if name_index is not None and row[name_index]: #and len(row) > name_index 
                            name = row[name_index].strip()
                        
                        if days_index is not None and row[days_index]: # and len(row) > days_index 
                            days = row[days_index].strip()

                        data.append((mssv, name, days))  # l∆∞u d·ªØ li·ªáu

    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file {pdf_path}: {e}")
        input("Nh·∫≠p enter ƒë·ªÉ ti·∫øp t·ª•c")

    return data

# l·∫•y danh s√°ch c√°c file PDF
pdf_files = [f for f in os.listdir(folder_path) if f.lower().endswith('.pdf')]
"""
    c√≥ th·ªÉ thay ƒëo·∫°n code ·ªü tr√™n b·∫±ng
    pdf_files = []
    for f in os.listdir(folder_path):
        if f.lower().endswith(".pdf"):
            pdf_file.append(f)
"""
if not pdf_files:
    print("‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong th∆∞ m·ª•c.")
    input()
    exit()

# nh·∫≠p th√¥ng tin c·∫ßn t√¨m
search_query = input("üîç Nh·∫≠p MSSV ho·∫∑c t√™n c·∫ßn t√¨m (b·ªè tr·ªëng ƒë·ªÉ xem t·∫•t c·∫£): ").strip().lower()

# danh s√°ch ch·ª©a th√¥ng tin c·∫ßn t√¨m kieeu dictionary
files_with_query = {}

# duy·ªát qua t·ª´ng file v√† tr√≠ch xu·∫•t d·ªØ li·ªáu
for pdf_file in pdf_files:
    pdf_path = os.path.join(folder_path, pdf_file) # l·ªánh n·ªëi ƒë∆∞·ªùng d·∫´n
    extracted_data = extract_data_from_pdf(pdf_path)

    if search_query:
        # l·ªçc danh s√°ch ch·ª©a mssv or t√™n
        matching_data = [(mssv, name, days) for mssv, name, days in extracted_data if search_query in mssv.lower() or search_query in name.lower()]
        
        if matching_data:
            files_with_query[pdf_file] = matching_data

    print(f"\nüìÑ **Danh s√°ch t·ª´ file: {pdf_file}**")
    if extracted_data:
        for mssv, name, days in extracted_data:
            if search_query and (search_query in mssv.lower() or search_query in name.lower()):
                print(f"- ‚úÖ MSSV: {mssv}, H·ªç T√™n: {name}, S·ªë ng√†y CTXH: {days}")  # highlight k·∫øt qu·∫£ t√¨m ki·∫øm
            else:
                print(f"- MSSV: {mssv}, H·ªç T√™n: {name}, S·ªë ng√†y CTXH: {days}")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong file n√†y.")

# hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm
if search_query:
    print("\nüåö**K·∫øt qu·∫£ t√¨m ki·∫øm:**")
    if files_with_query:
        for file, matched_data in files_with_query.items():
            print(f"üìå **{file}**:")
            for mssv, name, days in matched_data:
                print(f"- ‚úÖ MSSV: {mssv}, H·ªç T√™n: {name}, S·ªë ng√†y CTXH: {days}")
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin trong b·∫•t k·ª≥ file n√†o.")
print("\033[91mth·∫•y hay th√¨ cho d≈©ng xin 3k g·ª≠i xeü§°\033[0m")
input()
